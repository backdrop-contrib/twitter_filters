<?php
/**
 * @file
 * Provides API integration with the Twitter microblogging service.
 */

define ('twitter_filters_HOST',         'https://twitter.com');
define ('twitter_filters_API',          'https://api.twitter.com');
define ('twitter_filters_SEARCH',       'https://search.twitter.com');
define ('twitter_filters_TINYURL',      'http://tinyurl.com');
define ('twitter_filters_OAUTH_CALLBACK_URL', 'twitter/oauth');

/**
 * Implements hook_filter_info()
 */
function twitter_filters_filter_info() {
  $filters['twitter_filters_username'] = array(
    'title' => t('Twitter @username converter'),
    'description' => t('Converts Twitter-style @usernames into links to Twitter account pages.'),
    'process callback' => '_twitter_filters_filter_username',
    'tips callback' => '_twitter_filters_filter_tip_username',
  );
  $filters['twitter_filters_hashtag'] = array(
    'title' => t('Twitter #hashtag converter'),
    'description' => t('Converts Twitter-style #hashtags into links to twitter.com. Note: this converts all text prefixed by a "#" symbol into a hashtag link, so it can cause problems with other text.'),
    'process callback' => '_twitter_filters_filter_hashtag',
    'tips callback' => '_twitter_filters_filter_tip_hashtag',
  );
  $filters['twitter_filters_links'] = array(
    'title' => t('Twitter link converter'),
    'description' => t('Makes links in Twitter messages to be opened in new windows and adds rel="nofollow" so these links do not penalize SEO.'),
    'process callback' => '_twitter_filters_filter_link',
    'tips callback' => '_twitter_filters_filter_tip_link',
  );
  $filters['twitter_filters_embed'] = array(
    'title' => t('Embed Tweets'),
    'description' => t('Converts URLs for Twitter status updates into embedded Tweets. Should be sorted after the "Limit allowed HTML tags" filter, if used.'),
    'process callback' => '_twitter_filters_filter_embed_tweet',
    'tips callback' => '_twitter_filters_filter_tip_embed_tweet',
  );

  return $filters;
}

/**
 * Filter tips callback function for Twitter usernames.
 */
function _twitter_filters_filter_tip_username($filter, $format, $long = FALSE) {
  return t('Twitter-style @usernames are linked to their Twitter account pages.');
}

/**
 * Filter tips callback function for Twitter hashtags.
 */
function _twitter_filters_filter_tip_hashtag($format, $long = FALSE) {
  return t('Twitter-style #hashtags are linked to !url.', array(
    '!url' => '<a href="https://search.twitter.com/">search.twitter.com</a>')
  );
}

/**
 * Filter tips callback function for Twitter links.
 */
function _twitter_filters_filter_tip_link($filter, $format, $long = FALSE) {
  return t('Twitter message links are opened in new windows and rel="nofollow" is added.');
}

/**
 * Filter tips callback function for Embedded Tweets.
 */
function _twitter_filters_filter_tip_embed_tweet($filter, $format, $long = FALSE) {
  return t('Links to Twitter status updates are converted to Embedded Tweets.');
}

/**
 * Callback for twitter @username converter.
 *
 * @param string $text
 *   The text to be filtered.
 * @param mixed $filter
 *   The filter configuration.
 *
 * @return string
 *   The processed string.
 */
function _twitter_filters_filter_username($text, $filter = NULL) {
  $prefix = '@';
  $destination = variable_get('twitter_filters_host', twitter_filters_HOST) . '/';
  return _twitter_filters_filter_text($text, $prefix, $destination);
}

/**
 * Callback for twitter #hashtag converter.
 *
 * @param string $text
 *   The text to be filtered.
 * @param mixed $filter
 *   The filter configuration.
 *
 * @return string
 *   The processed string.
 */
function _twitter_filters_filter_hashtag($text, $filter = NULL) {
  $prefix = '#';
  $destination = variable_get('twitter_filters_search', twitter_filters_SEARCH) . '/search?q=%23';
  return _twitter_filters_filter_text($text, $prefix, $destination);
}

/**
 * Callback for Twitter link converter.
 *
 * @param string $text
 *   The text to be filtered.
 * @param mixed $filter
 *   The filter configuration.
 *
 * @return string
 *   The processed string.
 */
function _twitter_filters_filter_link($text, $filter = NULL) {
  return str_replace('<a ', '<a target="_blank" rel="nofollow" class="twitter-timeline-link" ', $text);
}

/**
 * This helper function converts Twitter-style @usernames and #hashtags into
 * actual links.
 *
 * @param string $text
 *   The text to be filtered.
 * @param string $prefix
 *   The string to search for.
 * @param string $destination
 *   The URL that the links will point to.
 * @param string $class
 *   An optional class to insert into the link.
 *
 * @return string
 *   The processed string.
 */
function _twitter_filters_filter_text($text, $prefix, $destination, $class = '') {
  $match = '/(?<!\w)' . preg_quote($prefix, '/') . '(\w+)/ui';
  if (!empty($class)) {
    $class = " class=\"{$class}\"";
  }
  $replacement = '<a href="' . $destination . '$1"' . $class . '>' . $prefix . '$1</a>';
  return preg_replace($match, $replacement, $text);
}

/**
 * Convert embedded URLs, hashtags and usernames in a tweet to links.
 *
 * @param string $message
 *   The tweet's text.
 * @param bool $usernames
 *   Whether or not to convert usernames to links. Defaults to TRUE.
 * @param bool $hashtags
 *   Whether or not to convert hashtags to links. Defaults to TRUE.
 * @param bool $attributes
 *   Whether or not to add extra attributes to links. Defaults to TRUE.
 * @param bool $urls
 *   Whether or not to convert other URLs to links. Defaults to TRUE.
 *
 * @return string
 *   The filtered tweet text.
 */
function twitter_filters_filter_message($message, $usernames = TRUE, $hashtags = TRUE, $attributes = TRUE, $urls = TRUE) {
  // Link usernames with their profiles.
  if ($usernames) {
    $message = _twitter_filters_filter_username($message);
  }

  // Link hashtags.
  if ($hashtags) {
    $message = _twitter_filters_filter_hashtag($message);
  }

  // Add extra attributes to links.
  if ($attributes) {
    $message = _twitter_filters_filter_link($message);
  }

  // Standard URLs.
  if ($urls) {
    $filter = new stdClass;
    $filter->settings = array(
      'filter_url_length' => 496,
    );
    $message = _filter_url($message, $filter);
  }

  // Avoid XSS within the message.
  return filter_xss($message);
}

/**
 * Callback for Embedded Tweets.
 */
function _twitter_filters_filter_embed_tweet($text, $filter) {

  // Tags to skip and not recurse into.
  $ignore_tags = 'a|script|style|code|pre';

  // Split at all tags; ensures that no tags or attributes are processed.
  $chunks = preg_split('/(<.+?>)/is', $text, -1, PREG_SPLIT_DELIM_CAPTURE);

  // PHP ensures that the array consists of alternating delimiters and
  // literals, and begins and ends with a literal (inserting NULL as required).
  // Therefore, the first chunk is always text:
  $chunk_type = 'text';

  // If a tag of $ignore_tags is found, it is stored in $open_tag and only
  // removed when the closing tag is found. Until the closing tag is found, no
  // replacements are made.
  $open_tag = '';

  // Loop through all of the text chunks.
  foreach ($chunks as $i => $chunk) {
    if ($chunk_type == 'text') {
      // Only process this text if there are no unclosed $ignore_tags.
      if ($open_tag == '') {
        // Check for links to Tweets to replace with embed code.
        $tweets = array();
        preg_match_all('/https?:\/\/(www\.)?twitter.com\/.+?\/status(es)?\/(.*)/i', $chunks[$i], $tweets, PREG_SET_ORDER);
        foreach ($tweets as $tweet) {
          $url = $tweet[0];
          $id = $tweet[3];
          $embed = twitter_filters_statuses_embed($tweet);
          $chunks[$i] = str_replace($url, $embed, $chunks[$i]);
        }
      }
      // Text chunk is done, so next chunk must be a tag.
      $chunk_type = 'tag';
    }
    else {
      // Only process this tag if there are no unclosed $ignore_tags.
      if ($open_tag == '') {
        // Check whether this tag is contained in $ignore_tags.
        if (preg_match("`<($ignore_tags)(?:\s|>)`i", $chunks[$i], $matches)) {
          $open_tag = $matches[1];
        }
      }
      // Otherwise, check whether this is the closing tag for $open_tag.
      else {
        if (preg_match("`<\/$open_tag>`i", $chunks[$i], $matches)) {
          $open_tag = '';
        }
      }
      // Tag chunk is done, so next chunk must be text.
      $chunk_type = 'text';
    }
  }

  return implode($chunks);
}

/**
 * Makes embedded tweets out of plain Twitter URLs.
 *
 * Callback for preg_replace_callback() within twitter_filter_process().
 */
function twitter_filters_statuses_embed($match) {
  $output = '';

  if (!empty($match)) {
    $tweet_url = backdrop_encode_path($match[0]);
    // Prepare new cURL resource
    $request = curl_init('https://publish.twitter.com/oembed?url=' . $tweet_url);
    curl_setopt($request, CURLOPT_RETURNTRANSFER,1);

    // Submit the request
    $json_result = curl_exec($request);

    // Close cURL session handle
    curl_close($request);

    // Handle curl error
    if ($json_result === false) {
      $output = $match[0];
    } else {
      $result = backdrop_json_decode($json_result);
      if (!empty($result['html'])) {
        $output = $result['html'];
      }
      else {
        $output = $match[0];
      }
    }
  }
  return $output;
}
